== Paths ==

The initial process is '/system/bin/app_process'.
This means path detection doesn't work.

The application is stored in /data/app/xxx.apk.
AFAICT it's not extracted anywhere, so we need to open it with libzip to extract files.

The application data is in:
- /data/data/org.freedink/{lib,files,cache}/ (internal storage)
- /storage/sdcard0/Android/data/org.freedink/files/ (external storage)
It can be used to stored additional files.

Last we can use the external storage.


== SDL2 ==

Official documentation is in SDL2/docs/README-android.md
See also my http://wiki.libsdl.org/Android

== Pre-requisites ==

 * Install minimal Java environment. For instance, in Debian/Ubuntu: {{{
sudo apt-get install openjdk-7-jdk ant
}}}
 * Install NDK (tested with [[http://dl.google.com/android/ndk/android-ndk-r8c-linux-x86.tar.bz2|r8c]])
 * Install the latest SDK, run `android` and install one API (>=12)
 * Configure your environment variables, e.g.: {{{
PATH="/usr/src/android-ndk-r8c:$PATH"                   # for 'ndk-build'
PATH="/usr/src/android-sdk-linux/tools:$PATH"           # for 'android'
PATH="/usr/src/android-sdk-linux/platform-tools:$PATH"  # for 'adb'
}}}
 * Edit {{{build-scripts/androidbuild.sh}}}, find the {{{android update project}}} line, and add {{{--target android-XX}}} to it (replace XX with your installed API number above).

== Simple builds ==

=== SDL wrapper for simple programs ===

 * Compile a sample app (calls ndk-build): {{{
 cd /usr/src/SDL2/build-scripts/
 ./androidbuild.sh org.libsdl.testgles ../test/testgles.c
}}}
 * Follow the instructions to install on your device: {{{
 cd /usr/src/SDL2/build/org.libsdl.testgles/
 ant debug install
}}}

Notes:
 * triple target armeabi/armeabi-v7a/x86 compilation!
 * application doesn't quit


=== SDL wrapper + SDL_image NDK module ===

Let's modify `SDL2_image/showimage.c` to show a simple embedded image (e.g. XPM).

Then let's make an Android app out of it. To compile: {{{
 cd /usr/src/SDL2/build-scripts/
 ./androidbuild.sh org.libsdl.showimage /usr/src/SDL2_image/showimage.c
 cd /usr/src/SDL2/build/org.libsdl.showimage/
 ln -s /usr/src/SDL2_image jni/
 ln -s /usr/src/SDL2_image/external/libwebp-0.3.0 jni/webp
 # - Edit jni/src/Android.mk
 #   LOCAL_SHARED_LIBRARIES := ... SDL2_image
 # - Edit jni/Application.mk: remove x86 where jpeg-9 doesn't build
 ndk-build -j$(nproc)
 ant debug install
}}}

Notes:
 * application doesn't restart properly


== Build an autotools-friendly environment ==

You use autotools in your project and can't be bothering understanding ndk-build's cryptic errors? This guide is for you!

Note: this environment can be used for CMake too.

=== Compile a shared binaries bundle for SDL and SDL_* ===

 * Start with a minimal build: {{{
cd /usr/src/SDL2/
cd build-scripts/
hg revert --all  # remove traces of previous builds
# edit androidbuild.sh and modify android update project --target android-XX
./androidbuild.sh org.libsdl /dev/null
# doesn't matter if the actual build fails, it's just for setup
cd ../build/org.libsdl/
}}}
 * Remove reference to our dummy file: {{{
rm -rf jni/src/
}}}
 * Get the latests SDL2_* libs from Mercurial (they fix a few bugs): {{{
cd /usr/src/
hg clone http://hg.libsdl.org/SDL_image SDL2_image
hg clone http://hg.libsdl.org/SDL_mixer SDL2_mixer
hg clone http://hg.libsdl.org/SDL_net   SDL2_net
hg clone http://hg.libsdl.org/SDL_ttf   SDL2_ttf
}}}
 * Reference SDL_image, SDL_mixer, SDL_ttf, and their dependencies, as NDK modules: {{{
ln -s /usr/src/SDL2_image jni/
ln -s /usr/src/SDL2_image/external/libwebp-0.3.0 jni/webp
ln -s /usr/src/SDL2_mixer jni/
ln -s /usr/src/SDL2_mixer/external/libmikmod-3.1.12 jni/libmikmod
ln -s /usr/src/SDL2_mixer/external/smpeg2-2.0.0 jni/smpeg2
ln -s /usr/src/SDL2_net jni/
ln -s /usr/src/SDL2_ttf jni/
}}}
 * Optionnaly edit `jni/Android.mk` to disable some formats, e.g.: {{{
SUPPORT_MP3_SMPEG := false
include $(call all-subdir-makefiles)
}}}
 * Launch the build! {{{
ndk-build -j$(nproc)
}}}

Note: no need to add `System.loadLibrary` calls in `SDLActivity.java`, your application will be linked to them and Android's Linux loads them automatically.


=== Install SDL in a GCC toolchain ===

Now:
 * Copy the NDK into a traditional GCC toolchain: {{{
/usr/src/android-ndk-r8c/build/tools/make-standalone-toolchain.sh \
  --platform=android-14 --install-dir=/usr/src/ndk-standalone-14-arm --arch=arm
}}}
 * Set your PATH (important, do it before any build): {{{
NDK_STANDALONE=/usr/src/ndk-standalone-14-arm
PATH=$NDK_STANDALONE/bin:$PATH
}}}
 * Install the SDL2 binaries in the toolchain: {{{
cd /usr/src/SDL2/build/org.libsdl/
for i in libs/armeabi/*; do ln -nfs $(pwd)/$i $NDK_STANDALONE/sysroot/usr/lib/; done
mkdir $NDK_STANDALONE/sysroot/usr/include/SDL2/
\cp jni/SDL/include/* $NDK_STANDALONE/sysroot/usr/include/SDL2/
\cp jni/*/SDL*.h $NDK_STANDALONE/sysroot/usr/include/SDL2/
}}}
 * Install `pkg-config` and install a host-triplet-prefixed symlink in the PATH (auto-detected by autoconf): {{{
VERSION=0.9.12
cd /usr/src/
wget http://rabbit.dereferenced.org/~nenolod/distfiles/pkgconf-$VERSION.tar.gz
tar xf pkgconf-$VERSION.tar.gz
cd pkgconf-$VERSION
mkdir native-android/ && cd native-android/
../configure --prefix=$NDK_STANDALONE/sysroot/usr
make -j$(nproc)
make install
ln -s ../sysroot/usr/bin/pkgconf $NDK_STANDALONE/bin/arm-linux-androideabi-pkg-config
mkdir $NDK_STANDALONE/sysroot/usr/lib/pkgconfig/
}}}
 * Install pkg-config `.pc` files for SDL: {{{
cat <<'EOF' > $NDK_STANDALONE/sysroot/usr/lib/pkgconfig/sdl2.pc
prefix=/usr/src/ndk-standalone-14-arm/sysroot/usr
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include
Name: sdl2
Description: Simple DirectMedia Layer is a cross-platform multimedia library designed to provide low level access to audio, keyboard, mouse, joystick, 3D hardware via OpenGL, and 2D video framebuffer.
Version: 2.0.2.scm
Requires:
Conflicts:
Libs: -lSDL2
Cflags: -I${includedir}/SDL2   -D_REENTRANT
EOF

cat <<'EOF' > $NDK_STANDALONE/sysroot/usr/lib/pkgconfig/SDL2_image.pc
prefix=/usr/src/ndk-standalone-14-arm/sysroot/usr
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include
Name: SDL2_image
Description: image loading library for Simple DirectMedia Layer
Version: 2.0.0.scm
Requires: sdl2 >= 2.0.0
Libs: -L${libdir} -lSDL2_image
Cflags: -I${includedir}/SDL2
EOF

cat <<'EOF' > $NDK_STANDALONE/sysroot/usr/lib/pkgconfig/SDL2_mixer.pc
prefix=/usr/src/ndk-standalone-14-arm/sysroot/usr
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include
Name: SDL2_mixer
Description: mixer library for Simple DirectMedia Layer
Version: 2.0.0.scm
Requires: sdl2 >= 2.0.0
Libs: -L${libdir} -lSDL2_mixer
Cflags: -I${includedir}/SDL2
EOF

cat <<'EOF' > $NDK_STANDALONE/sysroot/usr/lib/pkgconfig/SDL2_net.pc
prefix=/usr/src/ndk-standalone-14-arm/sysroot/usr
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include
Name: SDL2_net
Description: net library for Simple DirectMedia Layer
Version: 2.0.0.scm
Requires: sdl2 >= 2.0.0
Libs: -L${libdir} -lSDL2_net
Cflags: -I${includedir}/SDL2
EOF

cat <<'EOF' > $NDK_STANDALONE/sysroot/usr/lib/pkgconfig/SDL2_ttf.pc
prefix=/usr/src/ndk-standalone-14-arm/sysroot/usr
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include
Name: SDL2_ttf
Description: ttf library for Simple DirectMedia Layer with FreeType 2 support
Version: 2.0.12.scm
Requires: sdl2 >= 2.0.0
Libs: -L${libdir} -lSDL2_ttf
Cflags: -I${includedir}/SDL2
EOF
}}}

=== Building other dependencies ===

You can add any other libraries (e.g.: SDL2_gfx, freetype, gettext, gmp...) using commands like: {{{
mkdir cross-android/ && cd cross-android/
../configure --host=arm-linux-androideabi --prefix=$NDK_STANDALONE/sysroot/usr \
  --with-some-option --enable-another-option \
  --disable-shared
make -j$(nproc)
make install
}}}

Static builds (`--disable-shared`) are recommended for simplicity (no additional `.so` to declare).

Example with SDL2_gfx: {{{
VERSION=1.0.1
wget http://www.ferzkopp.net/Software/SDL2_gfx/SDL2_gfx-$VERSION.tar.gz
tar xf SDL2_gfx-$VERSION.tar.gz
mv SDL2_gfx-$VERSION/ SDL2_gfx/
cd SDL2_gfx/
mkdir cross-android/ && cd cross-android/
../configure --host=arm-linux-androideabi --prefix=$NDK_STANDALONE/sysroot/usr \
  --disable-shared --disable-mmx
make -j$(nproc)
make install
}}}

You can compile YOUR application using this technique, with some more steps to tell Android how to run it using JNI.


=== Build your autotools app ===

First, prepare an Android project:
 * Copy and adapt the `/usr/src/SDL2/android-project` skeleton as explained in `README-android.md`. You can leave it as-is in a first step.
 * Make links to the SDL binaries as well: {{{
mkdir -p libs/armeabi/
for i in /usr/src/SDL2/build/org.libsdl/libs/armeabi/*; do ln -nfs $i libs/armeabi/; done
}}}

Make your project Android-aware:
 * Add `/usr/src/SDL2/src/main/android/SDL_android_main.c` in your project (comment out the line referencing "SDL_internal.h"). Compile it as C (not C++).
 * In your {{{configure.ac}}}, detect Android: {{{
AM_CONDITIONAL(ANDROID, test "$host" = "arm-unknown-linux-androideabi")
}}}
 * In your {{{Makefile.am}}}, tell Automake you'll build executables as libraries, using something like: {{{
if ANDROID
  # Build .so JNI libs rather than executables
  AM_CFLAGS = -fPIC
  AM_LDFLAGS += -shared
  COMMON_OBJS += SDL_android_main.c
endif
}}}
 * Cross-compile your project using the GCC toolchain environment we created: {{{
PATH=$NDK_STANDALONE/bin:$PATH
mkdir cross-android/ && cd cross-android/
../configure --host=arm-linux-androideabi \
  --with-your-option --enable-your-other-option ...
make
}}}
 * Do this again for any additional arch you want to support (TODO: see how to support `armeabi-v7a` and document what devices support it); something like: {{{
mkdir cross-android-v7a/ && cd cross-android-v7a/
# .o: -march=armv5te -mtune=xscale -msoft-float -mthumb  =>  -march=armv7-a -mfpu=vfpv3-d16 -mfloat-abi=softfp -mthumb
# .so: -march=armv7-a -Wl,--fix-cortex-a8
CFLAGS="-g -O2 -march=armv7-a -mfpu=vfpv3-d16 -mfloat-abi=softfp -mthumb" LFDLAGS="-march=armv7-a -Wl,--fix-cortex-a8" \
  ../configure --host=arm-linux-androideabi \
  ...
}}}

Now you can install your pre-built binaries and build the Android project:
 * Copy your program in `android-project/libs/armeabi/libmain.so`.
 * Build your Android `.apk`: {{{
android update project --name your_app --path . --target android-XX
ant debug
ant installd
}}}
 * You can run the application remotely: {{{
adb shell am start -a android.intenon.MAIN -n org.libsdl.app/org.libsdl.app.SDLActivity  # replace with your app package
}}}
 * Your SDL2 Android app is running!

=== Build your CMake app ===

(Work In Progress)

You can use our Android GCC toolchain using a simple toolchain file: {{{
# CMake toolchain file
SET(CMAKE_SYSTEM_NAME Linux)  # Tell CMake we're cross-compiling
include(CMakeForceCompiler)
# Prefix detection only works with compiler id "GNU"
CMAKE_FORCE_C_COMPILER(arm-linux-androideabi-gcc GNU)
SET(ANDROID TRUE)
}}}

You then call CMake like this: {{{
PATH=$NDK_STANDALONE/bin:$PATH
cmake \
  -D CMAKE_TOOLCHAIN_FILE=../android_toolchain.cmake \
  ...
}}}


== FreeDink ==

=== iconv ===

# TODO: check if necessary (gettext should work but there may be accents issues)
#VERSION=0.14
#wget -c http://ftp.gnu.org/pub/gnu/libiconv/libiconv-$VERSION.tar.gz
#tar xf libiconv-$VERSION.tar.gz
#cd libiconv-$VERSION/
#mkdir cross-android/ && cd cross-android/
#\cp -a /usr/share/misc/config.{guess,sub} ../build-aux/
#\cp -a /usr/share/misc/config.{guess,sub} ../libcharset/build-aux/
#../configure --host=arm-linux-androideabi --prefix=/usr/src/ndk-standalone-14-arm/sysroot/usr \
#  --disable-shared
#make -j$(nproc) && make install


=== gettext ===

VERSION=0.19.5
wget -c http://ftp.gnu.org/pub/gnu/gettext/gettext-$VERSION.tar.gz
tar xf gettext-$VERSION.tar.gz
cd gettext-$VERSION/
cd gettext-runtime/
mkdir cross-android/ && cd cross-android/
../configure --host=arm-linux-androideabi --prefix=$NDK_STANDALONE/sysroot/usr \
  --disable-shared
make -j$(nproc) && make install


=== FreeDink engine ===

PATH=/usr/src/ndk-standalone-14-arm/bin:$PATH
mkdir cross-android/
cd cross-android/
../configure --host=arm-linux-androideabi \
  --prefix=/android-aint-posix \
  --disable-tests
make -j$(nproc)

# To see dynamic symbols:
arm-linux-androideabi-objdump -R src/freedink
# To simulate 'ldd':
arm-linux-androideabi-objdump -x libs/armeabi/libnative-activity.so | grep NEEDED
arm-linux-androideabi-readelf -d libs/armeabi/libnative-activity.so | grep NEEDED  # alternatively

# Initial install:
cp -a /usr/src/SDL2/android-project ../android
cd ../android/
ant clean
rm -rf libs/ bin/ gen/
mkdir -p libs/armeabi/
cp -a /usr/src/SDL2/build/org.libsdl/libs/armeabi/* libs/armeabi/
android update project --name freedink --path . --target android-22
echo '<?xml version="1.0" encoding="utf-8"?><resources><string name="app_name">FreeDink</string></resources>' > res/values/strings.xml
mkdir -p src/org/freedink/
# create src/org/freedink/SDLActivity.java
# ...

# If SDK changed:
android update project --name freedink --path . --target android-22

cp -a ../cross-android/src/freedink libs/armeabi/libmain.so
ant debug
ant installd

tar czf dink.tar.gz -C freedink-data-1.08.2015XXXX dink/
adb push dink.tar.gz /storage/sdcard0/Android/data/org.freedink/files/
adb shell
  cd /storage/sdcard0/Android/data/org.freedink/files/
  tar xf dink.tar.gz
exit

adb push ../share/freedink /storage/sdcard0/Android/data/org.freedink/files/freedink

cp -a /usr/share/midi/freepats .
cp -a /etc/timidity/freepats.cfg timidity.cfg
sed -i -e 's,/usr/share/midi/,,' timidity.cfg
tar czf timidity.tar.gz freepats/ timidity.cfg
rm -rf freepats/ timidity.cfg
adb push timidity.tar.gz /storage/sdcard0/Android/data/org.freedink/files/


=== Guile ===

# https://lists.gnu.org/archive/html/guile-user/2014-06/msg00011.html

/usr/src/android-ndk-r9d/build/tools/make-standalone-toolchain.sh \
  --platform=android-12 --install-dir=/usr/src/ndk-standalone-14-arm
PATH=/usr/src/ndk-standalone-14-arm/bin:$PATH

aptitude install lzip
WGET=wget

# - pkg-config (see above)

# libtool
VERSION=2.4.2
$WGET http://ftp.gnu.org/pub/gnu/libtool/libtool-$VERSION.tar.xz
tar xf libtool-$VERSION.tar.xz
cd libtool-$VERSION/
mkdir cross-android/ && cd cross-android/
../configure --host=arm-linux-androideabi --prefix=/usr/src/ndk-standalone-14-arm/sysroot/usr \
  --disable-shared
make -j$(nproc) && make install

# GMP
VERSION=6.0.0a
VERSIONDIR=6.0.0
$WGET https://gmplib.org/download/gmp/gmp-$VERSION.tar.lz
tar xf gmp-$VERSION.tar.lz
cd gmp-$VERSIONDIR/
mkdir cross-android/ && cd cross-android/
../configure --host=arm-linux-androideabi --prefix=/usr/src/ndk-standalone-14-arm/sysroot/usr \
  --disable-shared
make -j$(nproc) && make install

# - iconv (see above)

# libunistring
VERSION=0.9.3
$WGET http://ftp.gnu.org/gnu/libunistring/libunistring-0.9.3.tar.gz
tar xf libunistring-$VERSION.tar.gz
mkdir cross-android/ && cd cross-android/
\cp -a /usr/share/misc/config.{guess,sub} ../build-aux/
../configure --host=arm-linux-androideabi --prefix=/usr/src/ndk-standalone-14-arm/sysroot/usr \
  --disable-shared
make -j$(nproc) && make install

# libFFI
VERSION=3.1
$WGET ftp://sourceware.org/pub/libffi/libffi-$VERSION.tar.gz
tar xf libffi-$VERSION.tar.gz
cd libffi-$VERSION/
mkdir cross-android/ && cd cross-android/
../configure --host=arm-linux-androideabi --prefix=/usr/src/ndk-standalone-14-arm/sysroot/usr \
  --disable-shared
make -j$(nproc) && make install

# GC
VERSION=7.4.2
$WGET http://www.ivmaisoft.com/_bin/atomic_ops/libatomic_ops-$VERSION.tar.gz
tar xf libatomic_ops-$VERSION.tar.gz
cd libatomic_ops-$VERSION/
mkdir cross-android/ && cd cross-android/
../configure --host=arm-linux-androideabi --prefix=/usr/src/ndk-standalone-14-arm/sysroot/usr \
  --disable-shared
make -j$(nproc) && make install
cd ../..
$WGET http://www.hboehm.info/gc/gc_source/gc-$VERSION.tar.gz
tar xf gc-$VERSION.tar.gz
cd gc-$VERSION/
mkdir cross-android/ && cd cross-android/
../configure --host=arm-linux-androideabi --prefix=/usr/src/ndk-standalone-14-arm/sysroot/usr \
  --disable-shared
make -j$(nproc) && make install

# Guile 2!
cd guile/cross-android/
git checkout stable-2.0
mkdir cross-android/ && cd cross-android/
../configure --host=arm-linux-androideabi --prefix=/usr/src/ndk-standalone-14-arm/sysroot/usr \
  --disable-shared
make -j$(nproc)
=> build failure due to Android's pthread_cancel
../configure --host=arm-linux-androideabi --prefix=/usr/src/ndk-standalone-14-arm/sysroot/usr \
  --disable-shared --without-threads
=> OK but "unknown CPU endianness "arm" in ice-9/eval.go
